// <auto-generated />
using System;
using DietDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DietDB.Migrations
{
    [DbContext(typeof(DietContext))]
    [Migration("20231101190444_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArticleLayoutPhoto", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesId", "PhotosId");

                    b.HasIndex("PhotosId");

                    b.ToTable("ArticleLayoutPhoto");
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("CarouselLayoutPhoto", b =>
                {
                    b.Property<int>("CarouselsId")
                        .HasColumnType("int");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.HasKey("CarouselsId", "PhotosId");

                    b.HasIndex("PhotosId");

                    b.ToTable("CarouselLayoutPhoto");
                });

            modelBuilder.Entity("CategoryOfDietSingleDiet", b =>
                {
                    b.Property<int>("DietCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("SingleDietsId")
                        .HasColumnType("int");

                    b.HasKey("DietCategoriesId", "SingleDietsId");

                    b.HasIndex("SingleDietsId");

                    b.ToTable("CategoryOfDietSingleDiet");
                });

            modelBuilder.Entity("LayoutPhotoNews", b =>
                {
                    b.Property<int>("NewsesId")
                        .HasColumnType("int");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.HasKey("NewsesId", "PhotosId");

                    b.HasIndex("PhotosId");

                    b.ToTable("LayoutPhotoNews");
                });

            modelBuilder.Entity("MainNavbarTab", b =>
                {
                    b.Property<int>("MainNavbarsId")
                        .HasColumnType("int");

                    b.Property<int>("TabsId")
                        .HasColumnType("int");

                    b.HasKey("MainNavbarsId", "TabsId");

                    b.HasIndex("TabsId");

                    b.ToTable("MainNavbarTab");
                });

            modelBuilder.Entity("MessagePatient", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("MessageId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("MessagePatient");
                });

            modelBuilder.Entity("ModelsDB.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ModelsDB.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ModelsDB.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.ToTable("Diet");
                });

            modelBuilder.Entity("ModelsDB.Dietician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isDietician")
                        .HasColumnType("bit");

                    b.Property<bool>("isPatient")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RatingId");

                    b.ToTable("DieticiansDb", (string)null);
                });

            modelBuilder.Entity("ModelsDB.Diploma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoDiplomaLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoDiplomaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.ToTable("Diploma");
                });

            modelBuilder.Entity("ModelsDB.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<string>("DishPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Glycemic")
                        .HasColumnType("real");

                    b.Property<float>("Macronutrient")
                        .HasColumnType("real");

                    b.Property<float>("Micronutrient")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dish");
                });

            modelBuilder.Entity("ModelsDB.Example", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExamplesDb");
                });

            modelBuilder.Entity("ModelsDB.FoodCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CatalogName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.ToTable("FoodCatalog");
                });

            modelBuilder.Entity("ModelsDB.Functionality.CategoryOfDietsDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryOfDietsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DayWeeksDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayWeeksDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.HasKey("MessageId", "DieticianId");

                    b.HasIndex("DieticianId");

                    b.ToTable("DieticianMessage");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianNote", b =>
                {
                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.HasKey("NoteId", "DieticianId");

                    b.HasIndex("DieticianId");

                    b.ToTable("DieticianNote");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianOffice", b =>
                {
                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("DieticianId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("DieticianOffice");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianPatientsDb", b =>
                {
                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("DieticianId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("DieticianPatientsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DietPatient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("DietPatient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DietSingleDiet", b =>
                {
                    b.Property<int>("SingleDietId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.HasKey("SingleDietId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("DietSingleDiet");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishFoodCatalog", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("FoodCatalogId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "FoodCatalogId");

                    b.HasIndex("FoodCatalogId");

                    b.ToTable("DishFoodCatalog");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishIngredient", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishIngredient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishMeasure", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "MeasureId");

                    b.HasIndex("MeasureId");

                    b.ToTable("DishMeasure");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MealTimesDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DishTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealTimesDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MealTimeSingleDiet", b =>
                {
                    b.Property<int>("MealTimeId")
                        .HasColumnType("int");

                    b.Property<int>("SingleDietId")
                        .HasColumnType("int");

                    b.HasKey("MealTimeId", "SingleDietId");

                    b.HasIndex("SingleDietId");

                    b.ToTable("MealTimeSingleDiet");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MessageToDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("MessageTos");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MessageToPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("MessageToPatients");
                });

            modelBuilder.Entity("ModelsDB.Functionality.PatientCardSurvey", b =>
                {
                    b.Property<int>("PatientCardId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("PatientCardId", "SurveyId");

                    b.HasIndex("SurveyId");

                    b.ToTable("PatientCardSurvey");
                });

            modelBuilder.Entity("ModelsDB.Functionality.SexesDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SexesDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.SingleDietsDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayWeekId")
                        .HasColumnType("int");

                    b.Property<int>("MealTimeHour")
                        .HasColumnType("int");

                    b.Property<int>("MealTimeMinute")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayWeekId");

                    b.ToTable("SingleDietsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.StatusesDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusesDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TermId");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("ModelsDB.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float>("Glycemic")
                        .HasColumnType("real");

                    b.Property<float>("Macronutrient")
                        .HasColumnType("real");

                    b.Property<float>("Micronutrient")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("ModelsDB.Layout.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutCategoryId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("ModelsDB.Layout.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutCategoryId");

                    b.ToTable("Carousel");
                });

            modelBuilder.Entity("ModelsDB.Layout.Footer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Footer");
                });

            modelBuilder.Entity("ModelsDB.Layout.LayoutCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.LayoutPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LayoutPhoto");
                });

            modelBuilder.Entity("ModelsDB.Layout.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FooterId")
                        .HasColumnType("int");

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FooterId");

                    b.HasIndex("LayoutCategoryId");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("ModelsDB.Layout.MainNavbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutCategoryId")
                        .IsUnique();

                    b.ToTable("Navbar");
                });

            modelBuilder.Entity("ModelsDB.Layout.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ModelsDB.Layout.SocialMediaDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FooterId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FooterId");

                    b.HasIndex("LinkId");

                    b.ToTable("SocialMediaDb");
                });

            modelBuilder.Entity("ModelsDB.Layout.SubTab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("TabId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId")
                        .IsUnique();

                    b.HasIndex("TabId");

                    b.ToTable("SubTab");
                });

            modelBuilder.Entity("ModelsDB.Layout.Tab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tab");
                });

            modelBuilder.Entity("ModelsDB.Layout.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.CategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryType");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("FileCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("FileCategoryId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.FileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTypeId");

                    b.ToTable("FileCategory");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Manual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("FileCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("FileCategoryId");

                    b.ToTable("Manual");
                });

            modelBuilder.Entity("ModelsDB.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("ModelsDB.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("ModelsDB.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isVisibleToPatient")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("ModelsDB.NotePatient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("NotePatient");
                });

            modelBuilder.Entity("ModelsDB.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("ModelsDB.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientCardId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isDietician")
                        .HasColumnType("bit");

                    b.Property<bool>("isPatient")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PatientCardId");

                    b.HasIndex("SexId");

                    b.ToTable("PatientsDb", (string)null);
                });

            modelBuilder.Entity("ModelsDB.PatientCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SexId");

                    b.ToTable("PatientCard");
                });

            modelBuilder.Entity("ModelsDB.RatingsDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("RatingsDb");
                });

            modelBuilder.Entity("ModelsDB.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("Step")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DishId")
                        .IsUnique();

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("ModelsDB.SingleTestEqualsDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TestEqualId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<float>("test1")
                        .HasColumnType("real");

                    b.Property<float>("test2")
                        .HasColumnType("real");

                    b.Property<float>("test3")
                        .HasColumnType("real");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestEqualId");

                    b.ToTable("SingleTestEqualsDb");
                });

            modelBuilder.Entity("ModelsDB.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Heigth")
                        .HasColumnType("real");

                    b.Property<DateTime>("MeasureTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weith")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("ModelsDB.TestEqual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientCardId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientCardId");

                    b.HasIndex("PatientId");

                    b.ToTable("TestEqual");
                });

            modelBuilder.Entity("ArticleLayoutPhoto", b =>
                {
                    b.HasOne("ModelsDB.Layout.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutPhoto", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("ModelsDB.Layout.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarouselLayoutPhoto", b =>
                {
                    b.HasOne("ModelsDB.Layout.Carousel", null)
                        .WithMany()
                        .HasForeignKey("CarouselsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutPhoto", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryOfDietSingleDiet", b =>
                {
                    b.HasOne("ModelsDB.Functionality.CategoryOfDietsDb", null)
                        .WithMany()
                        .HasForeignKey("DietCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.SingleDietsDb", null)
                        .WithMany()
                        .HasForeignKey("SingleDietsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LayoutPhotoNews", b =>
                {
                    b.HasOne("ModelsDB.Layout.News", null)
                        .WithMany()
                        .HasForeignKey("NewsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutPhoto", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MainNavbarTab", b =>
                {
                    b.HasOne("ModelsDB.Layout.MainNavbar", null)
                        .WithMany()
                        .HasForeignKey("MainNavbarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Tab", null)
                        .WithMany()
                        .HasForeignKey("TabsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessagePatient", b =>
                {
                    b.HasOne("ModelsDB.Message", "Message")
                        .WithMany("MessageToPatients")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("MessagePatientsDb")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Comment", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("CommentsDb")
                        .HasForeignKey("DieticianId");

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("CommentsDb")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Diet", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DietsDb")
                        .HasForeignKey("DieticianId");

                    b.Navigation("Dietician");
                });

            modelBuilder.Entity("ModelsDB.Dietician", b =>
                {
                    b.HasOne("ModelsDB.Address", "Address")
                        .WithMany("DieticiansDb")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", null)
                        .WithMany("DieticiansDb")
                        .HasForeignKey("PatientId");

                    b.HasOne("ModelsDB.RatingsDb", "RatingsDb")
                        .WithMany("DieticiansDb")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("RatingsDb");
                });

            modelBuilder.Entity("ModelsDB.Diploma", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DiplomasDb")
                        .HasForeignKey("DieticianId");

                    b.Navigation("Dietician");
                });

            modelBuilder.Entity("ModelsDB.FoodCatalog", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("FoodCatalogsDb")
                        .HasForeignKey("DieticianId");

                    b.Navigation("Dietician");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianMessage", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("MessageDieticians")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Message", "Message")
                        .WithMany("MessageDieticians")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianNote", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DieticianNotes")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Note", "Note")
                        .WithMany("DieticianNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianOffice", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DieticianOffices")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Office", "Office")
                        .WithMany("DieticianOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianPatientsDb", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DieticianPatients")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("DieticianPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DietPatient", b =>
                {
                    b.HasOne("ModelsDB.Diet", "Diet")
                        .WithMany("DietPatients")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("DietPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DietSingleDiet", b =>
                {
                    b.HasOne("ModelsDB.Diet", "Diet")
                        .WithMany("DietSingleDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.SingleDietsDb", "SingleDietsDb")
                        .WithMany("DietSingleDiets")
                        .HasForeignKey("SingleDietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("SingleDietsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishFoodCatalog", b =>
                {
                    b.HasOne("ModelsDB.Dish", "Dish")
                        .WithMany("DishFoodCatalogs")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.FoodCatalog", "FoodCatalog")
                        .WithMany("DishFoodCatalogs")
                        .HasForeignKey("FoodCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("FoodCatalog");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishIngredient", b =>
                {
                    b.HasOne("ModelsDB.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Ingredient", "Ingredient")
                        .WithMany("DishIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishMeasure", b =>
                {
                    b.HasOne("ModelsDB.Dish", "Dish")
                        .WithMany("DishMeasures")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Measure", "Measure")
                        .WithMany("DishMeasures")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MealTimeSingleDiet", b =>
                {
                    b.HasOne("ModelsDB.Functionality.MealTimesDb", "MealTimesDb")
                        .WithMany("MealTimeSingleDiets")
                        .HasForeignKey("MealTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.SingleDietsDb", "SingleDietsDb")
                        .WithMany("MealTimeSingleDiets")
                        .HasForeignKey("SingleDietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealTimesDb");

                    b.Navigation("SingleDietsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MessageToDb", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("MessageTos")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("MessageTos")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MessageToPatient", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("MessageToPatients")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("MessageToPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.PatientCardSurvey", b =>
                {
                    b.HasOne("ModelsDB.PatientCard", "PatientCard")
                        .WithMany("PatientCardSurveys")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Survey", "Survey")
                        .WithMany("PatientCardSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientCard");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("ModelsDB.Functionality.SingleDietsDb", b =>
                {
                    b.HasOne("ModelsDB.Functionality.DayWeeksDb", "DayWeeksDb")
                        .WithMany("SingleDiets")
                        .HasForeignKey("DayWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayWeeksDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Visit", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("VisitsDb")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("VisitsDb")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.StatusesDb", "StatusesDb")
                        .WithMany("VisitsDb")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.Term", "Term")
                        .WithMany("VisitsDb")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");

                    b.Navigation("StatusesDb");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("ModelsDB.Layout.Article", b =>
                {
                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithMany()
                        .HasForeignKey("LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.Carousel", b =>
                {
                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithMany()
                        .HasForeignKey("LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.Link", b =>
                {
                    b.HasOne("ModelsDB.Layout.Footer", "Footer")
                        .WithMany("LinksDb")
                        .HasForeignKey("FooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithMany("LinksDb")
                        .HasForeignKey("LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footer");

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.MainNavbar", b =>
                {
                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithOne("MainNavbar")
                        .HasForeignKey("ModelsDB.Layout.MainNavbar", "LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.SocialMediaDb", b =>
                {
                    b.HasOne("ModelsDB.Layout.Footer", "Footer")
                        .WithMany("SocialMediaDb")
                        .HasForeignKey("FooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footer");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("ModelsDB.Layout.SubTab", b =>
                {
                    b.HasOne("ModelsDB.Layout.Link", "Link")
                        .WithOne("SubTab")
                        .HasForeignKey("ModelsDB.Layout.SubTab", "LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Tab", "Tab")
                        .WithMany("SubTabsDb")
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Document", b =>
                {
                    b.HasOne("ModelsDB.ManualPanel.Content", "Content")
                        .WithMany("DocumentsDb")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.ManualPanel.FileCategory", "FileCategory")
                        .WithMany()
                        .HasForeignKey("FileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("FileCategory");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.FileCategory", b =>
                {
                    b.HasOne("ModelsDB.ManualPanel.CategoryType", "CategoryType")
                        .WithMany("FileCategoriesDb")
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryType");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Manual", b =>
                {
                    b.HasOne("ModelsDB.ManualPanel.Content", "Content")
                        .WithMany("ManualsDb")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.ManualPanel.FileCategory", "FileCategory")
                        .WithMany("ManualsDb")
                        .HasForeignKey("FileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("FileCategory");
                });

            modelBuilder.Entity("ModelsDB.Note", b =>
                {
                    b.HasOne("ModelsDB.Dietician", null)
                        .WithMany("NotesDb")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", null)
                        .WithMany("NotesDb")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ModelsDB.NotePatient", b =>
                {
                    b.HasOne("ModelsDB.Note", "Note")
                        .WithMany("NotePatients")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("NotePatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Office", b =>
                {
                    b.HasOne("ModelsDB.Address", "Address")
                        .WithMany("OfficesDb")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ModelsDB.Patient", b =>
                {
                    b.HasOne("ModelsDB.Address", "Address")
                        .WithMany("PatientsDb")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.PatientCard", "PatientCard")
                        .WithMany("PatientsDb")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.SexesDb", null)
                        .WithMany("PatientsDb")
                        .HasForeignKey("SexId");

                    b.Navigation("Address");

                    b.Navigation("PatientCard");
                });

            modelBuilder.Entity("ModelsDB.PatientCard", b =>
                {
                    b.HasOne("ModelsDB.Functionality.SexesDb", "SexesDb")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SexesDb");
                });

            modelBuilder.Entity("ModelsDB.RatingsDb", b =>
                {
                    b.HasOne("ModelsDB.Patient", null)
                        .WithMany("Ratings")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ModelsDB.Recipe", b =>
                {
                    b.HasOne("ModelsDB.Dish", "Dish")
                        .WithOne("Recipe")
                        .HasForeignKey("ModelsDB.Recipe", "DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("ModelsDB.SingleTestEqualsDb", b =>
                {
                    b.HasOne("ModelsDB.TestEqual", "TestEqual")
                        .WithMany("SingleTestEqualsDb")
                        .HasForeignKey("TestEqualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestEqual");
                });

            modelBuilder.Entity("ModelsDB.TestEqual", b =>
                {
                    b.HasOne("ModelsDB.PatientCard", "PatientCard")
                        .WithMany("TestEqualsDb")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PatientCard");
                });

            modelBuilder.Entity("ModelsDB.Address", b =>
                {
                    b.Navigation("DieticiansDb");

                    b.Navigation("OfficesDb");

                    b.Navigation("PatientsDb");
                });

            modelBuilder.Entity("ModelsDB.Diet", b =>
                {
                    b.Navigation("DietPatients");

                    b.Navigation("DietSingleDiets");
                });

            modelBuilder.Entity("ModelsDB.Dietician", b =>
                {
                    b.Navigation("CommentsDb");

                    b.Navigation("DieticianNotes");

                    b.Navigation("DieticianOffices");

                    b.Navigation("DieticianPatients");

                    b.Navigation("DietsDb");

                    b.Navigation("DiplomasDb");

                    b.Navigation("FoodCatalogsDb");

                    b.Navigation("MessageDieticians");

                    b.Navigation("MessageTos");

                    b.Navigation("MessageToPatients");

                    b.Navigation("NotesDb");

                    b.Navigation("VisitsDb");
                });

            modelBuilder.Entity("ModelsDB.Dish", b =>
                {
                    b.Navigation("DishFoodCatalogs");

                    b.Navigation("DishIngredients");

                    b.Navigation("DishMeasures");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ModelsDB.FoodCatalog", b =>
                {
                    b.Navigation("DishFoodCatalogs");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DayWeeksDb", b =>
                {
                    b.Navigation("SingleDiets");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MealTimesDb", b =>
                {
                    b.Navigation("MealTimeSingleDiets");
                });

            modelBuilder.Entity("ModelsDB.Functionality.SexesDb", b =>
                {
                    b.Navigation("PatientsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.SingleDietsDb", b =>
                {
                    b.Navigation("DietSingleDiets");

                    b.Navigation("MealTimeSingleDiets");
                });

            modelBuilder.Entity("ModelsDB.Functionality.StatusesDb", b =>
                {
                    b.Navigation("VisitsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Term", b =>
                {
                    b.Navigation("VisitsDb");
                });

            modelBuilder.Entity("ModelsDB.Ingredient", b =>
                {
                    b.Navigation("DishIngredients");
                });

            modelBuilder.Entity("ModelsDB.Layout.Footer", b =>
                {
                    b.Navigation("LinksDb");

                    b.Navigation("SocialMediaDb");
                });

            modelBuilder.Entity("ModelsDB.Layout.LayoutCategory", b =>
                {
                    b.Navigation("LinksDb");

                    b.Navigation("MainNavbar");
                });

            modelBuilder.Entity("ModelsDB.Layout.Link", b =>
                {
                    b.Navigation("SubTab");
                });

            modelBuilder.Entity("ModelsDB.Layout.Tab", b =>
                {
                    b.Navigation("SubTabsDb");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.CategoryType", b =>
                {
                    b.Navigation("FileCategoriesDb");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Content", b =>
                {
                    b.Navigation("DocumentsDb");

                    b.Navigation("ManualsDb");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.FileCategory", b =>
                {
                    b.Navigation("ManualsDb");
                });

            modelBuilder.Entity("ModelsDB.Measure", b =>
                {
                    b.Navigation("DishMeasures");
                });

            modelBuilder.Entity("ModelsDB.Message", b =>
                {
                    b.Navigation("MessageDieticians");

                    b.Navigation("MessageToPatients");
                });

            modelBuilder.Entity("ModelsDB.Note", b =>
                {
                    b.Navigation("DieticianNotes");

                    b.Navigation("NotePatients");
                });

            modelBuilder.Entity("ModelsDB.Office", b =>
                {
                    b.Navigation("DieticianOffices");
                });

            modelBuilder.Entity("ModelsDB.Patient", b =>
                {
                    b.Navigation("CommentsDb");

                    b.Navigation("DietPatients");

                    b.Navigation("DieticianPatients");

                    b.Navigation("DieticiansDb");

                    b.Navigation("MessagePatientsDb");

                    b.Navigation("MessageTos");

                    b.Navigation("MessageToPatients");

                    b.Navigation("NotePatients");

                    b.Navigation("NotesDb");

                    b.Navigation("Ratings");

                    b.Navigation("VisitsDb");
                });

            modelBuilder.Entity("ModelsDB.PatientCard", b =>
                {
                    b.Navigation("PatientCardSurveys");

                    b.Navigation("PatientsDb");

                    b.Navigation("TestEqualsDb");
                });

            modelBuilder.Entity("ModelsDB.RatingsDb", b =>
                {
                    b.Navigation("DieticiansDb");
                });

            modelBuilder.Entity("ModelsDB.Survey", b =>
                {
                    b.Navigation("PatientCardSurveys");
                });

            modelBuilder.Entity("ModelsDB.TestEqual", b =>
                {
                    b.Navigation("SingleTestEqualsDb");
                });
#pragma warning restore 612, 618
        }
    }
}
