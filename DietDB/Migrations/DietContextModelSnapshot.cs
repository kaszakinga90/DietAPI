// <auto-generated />
using System;
using DietDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DietDB.Migrations
{
    [DbContext(typeof(DietContext))]
    partial class DietContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArticleLayoutPhoto", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesId", "PhotosId");

                    b.HasIndex("PhotosId");

                    b.ToTable("ArticleLayoutPhoto");
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("CarouselLayoutPhoto", b =>
                {
                    b.Property<int>("CarouselsId")
                        .HasColumnType("int");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.HasKey("CarouselsId", "PhotosId");

                    b.HasIndex("PhotosId");

                    b.ToTable("CarouselLayoutPhoto");
                });

            modelBuilder.Entity("LayoutPhotoNews", b =>
                {
                    b.Property<int>("NewsesId")
                        .HasColumnType("int");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.HasKey("NewsesId", "PhotosId");

                    b.HasIndex("PhotosId");

                    b.ToTable("LayoutPhotoNews");
                });

            modelBuilder.Entity("MainNavbarTab", b =>
                {
                    b.Property<int>("MainNavbarsId")
                        .HasColumnType("int");

                    b.Property<int>("TabsId")
                        .HasColumnType("int");

                    b.HasKey("MainNavbarsId", "TabsId");

                    b.HasIndex("TabsId");

                    b.ToTable("MainNavbarTab");
                });

            modelBuilder.Entity("ModelsDB.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ModelsDB.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isDietician")
                        .HasColumnType("bit");

                    b.Property<bool>("isPatient")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("AdminsDb", (string)null);
                });

            modelBuilder.Entity("ModelsDB.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ModelsDB.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("numberOfMeals")
                        .HasColumnType("int");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieteticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("Diet");
                });

            modelBuilder.Entity("ModelsDB.Dietician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isDietician")
                        .HasColumnType("bit");

                    b.Property<bool>("isPatient")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RatingId");

                    b.ToTable("DieticiansDb", (string)null);
                });

            modelBuilder.Entity("ModelsDB.Diploma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.ToTable("Diploma");
                });

            modelBuilder.Entity("ModelsDB.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Calories")
                        .HasColumnType("int");

                    b.Property<int?>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<string>("DishPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GlycemicIndex")
                        .HasColumnType("int");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<float?>("ServingQuantity")
                        .HasColumnType("real");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("MeasureId");

                    b.HasIndex("RecipeId")
                        .IsUnique()
                        .HasFilter("[RecipeId] IS NOT NULL");

                    b.HasIndex("UnitId");

                    b.ToTable("Dish");
                });

            modelBuilder.Entity("ModelsDB.FoodCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CatalogName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DieteticianId")
                        .HasColumnType("int");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.ToTable("FoodCatalog");
                });

            modelBuilder.Entity("ModelsDB.Functionality.CategoryOfDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryOfDiet");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DayWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayWeek");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianNote", b =>
                {
                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("DieticianId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("DieticianNote");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianOffice", b =>
                {
                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("DieticianId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("DieticianOffice");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianPatient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DieticianId");

                    b.HasIndex("DieticianId");

                    b.ToTable("DieticianPatientsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianSpecialization", b =>
                {
                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("DieticianId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("DieticianSpecialization");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishFoodCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("FoodCatalogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("FoodCatalogId");

                    b.ToTable("DishFoodCatalog");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishIngredient", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("DishId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishIngredient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.IngredientNutrient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("NutrientId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float>("NutrientValue")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId", "NutrientId");

                    b.HasIndex("NutrientId");

                    b.ToTable("IngredientNutrient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MealTimeToXYAxis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DietId")
                        .HasColumnType("int");

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MealTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealTimeToXYAxis");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MessageTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("MessageToDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.NotePatient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("NotePatient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsMacronutrient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMicronutrient")
                        .HasColumnType("bit");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NutritionixId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Nutrient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.PatientCardSurvey", b =>
                {
                    b.Property<int>("PatientCardId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("PatientCardId", "SurveyId");

                    b.HasIndex("SurveyId");

                    b.ToTable("PatientCardSurvey");
                });

            modelBuilder.Entity("ModelsDB.Functionality.RecipeStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeStep");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sex");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SpecializationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecializationsDb");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TermId");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("ModelsDB.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<int?>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int?>("GlycemicIndex")
                        .HasColumnType("int");

                    b.Property<int>("MeasureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ServingQuantity")
                        .HasColumnType("real");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DieticianId");

                    b.HasIndex("MeasureId");

                    b.HasIndex("UnitId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("ModelsDB.Layout.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutCategoryId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("ModelsDB.Layout.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutCategoryId");

                    b.ToTable("Carousel");
                });

            modelBuilder.Entity("ModelsDB.Layout.Footer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Footer");
                });

            modelBuilder.Entity("ModelsDB.Layout.LayoutCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.LayoutPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LayoutPhoto");
                });

            modelBuilder.Entity("ModelsDB.Layout.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FooterId")
                        .HasColumnType("int");

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FooterId");

                    b.HasIndex("LayoutCategoryId");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("ModelsDB.Layout.MainNavbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LayoutCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutCategoryId")
                        .IsUnique();

                    b.ToTable("Navbar");
                });

            modelBuilder.Entity("ModelsDB.Layout.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ModelsDB.Layout.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FooterId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FooterId");

                    b.HasIndex("LinkId")
                        .IsUnique();

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("ModelsDB.Layout.SubTab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("TabId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId")
                        .IsUnique();

                    b.HasIndex("TabId");

                    b.ToTable("SubTab");
                });

            modelBuilder.Entity("ModelsDB.Layout.Tab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tab");
                });

            modelBuilder.Entity("ModelsDB.Layout.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.CategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryType");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("FileCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("FileCategoryId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.FileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTypeId");

                    b.ToTable("FileCategory");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Manual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("FileCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("FileCategoryId");

                    b.ToTable("Manual");
                });

            modelBuilder.Entity("ModelsDB.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("ModelsDB.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DieticianId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isVisibleToPatient")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DieticianId");

                    b.HasIndex("PatientId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("ModelsDB.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("OfficeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("ModelsDB.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientCardId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isDietician")
                        .HasColumnType("bit");

                    b.Property<bool>("isPatient")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PatientCardId");

                    b.HasIndex("SexId");

                    b.ToTable("PatientsDb", (string)null);
                });

            modelBuilder.Entity("ModelsDB.PatientCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SexId");

                    b.ToTable("PatientCard");
                });

            modelBuilder.Entity("ModelsDB.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("ModelsDB.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("ModelsDB.SingleTestEqual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TestEqualId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<float>("test1")
                        .HasColumnType("real");

                    b.Property<float>("test2")
                        .HasColumnType("real");

                    b.Property<float>("test3")
                        .HasColumnType("real");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestEqualId");

                    b.ToTable("SingleTestEqual");
                });

            modelBuilder.Entity("ModelsDB.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Heigth")
                        .HasColumnType("real");

                    b.Property<DateTime>("MeasureTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weith")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("ModelsDB.TestEqual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientCardId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("whoAdded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("whoUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientCardId");

                    b.HasIndex("PatientId");

                    b.ToTable("TestEqual");
                });

            modelBuilder.Entity("ArticleLayoutPhoto", b =>
                {
                    b.HasOne("ModelsDB.Layout.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutPhoto", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("ModelsDB.Layout.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarouselLayoutPhoto", b =>
                {
                    b.HasOne("ModelsDB.Layout.Carousel", null)
                        .WithMany()
                        .HasForeignKey("CarouselsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutPhoto", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LayoutPhotoNews", b =>
                {
                    b.HasOne("ModelsDB.Layout.News", null)
                        .WithMany()
                        .HasForeignKey("NewsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutPhoto", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MainNavbarTab", b =>
                {
                    b.HasOne("ModelsDB.Layout.MainNavbar", null)
                        .WithMany()
                        .HasForeignKey("MainNavbarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Tab", null)
                        .WithMany()
                        .HasForeignKey("TabsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelsDB.Admin", b =>
                {
                    b.HasOne("ModelsDB.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ModelsDB.Comment", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("Comments")
                        .HasForeignKey("DieticianId");

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("Comments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Diet", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("Diets")
                        .HasForeignKey("DieteticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("Diets")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Dietician", b =>
                {
                    b.HasOne("ModelsDB.Address", "Address")
                        .WithMany("Dieticians")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", null)
                        .WithMany("Dieticians")
                        .HasForeignKey("PatientId");

                    b.HasOne("ModelsDB.Rating", "Rating")
                        .WithMany("Dieticians")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("ModelsDB.Diploma", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("Diplomas")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");
                });

            modelBuilder.Entity("ModelsDB.Dish", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany()
                        .HasForeignKey("DieticianId");

                    b.HasOne("ModelsDB.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId");

                    b.HasOne("ModelsDB.Recipe", "Recipe")
                        .WithOne("Dish")
                        .HasForeignKey("ModelsDB.Dish", "RecipeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ModelsDB.Functionality.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Dietician");

                    b.Navigation("Measure");

                    b.Navigation("Recipe");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ModelsDB.FoodCatalog", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("FoodCatalogs")
                        .HasForeignKey("DieticianId");

                    b.Navigation("Dietician");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianNote", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DieticianNotes")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Note", "Note")
                        .WithMany("DieticianNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianOffice", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DieticianOffices")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ModelsDB.Office", "Office")
                        .WithMany("DieticianOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianPatient", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DieticianPatients")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("DieticianPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DieticianSpecialization", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("DieticianSpecializations")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.Specialization", "Specialization")
                        .WithMany("DieticianSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishFoodCatalog", b =>
                {
                    b.HasOne("ModelsDB.Dish", "Dish")
                        .WithMany("DishFoodCatalogs")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.FoodCatalog", "FoodCatalog")
                        .WithMany("DishFoodCatalogs")
                        .HasForeignKey("FoodCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("FoodCatalog");
                });

            modelBuilder.Entity("ModelsDB.Functionality.DishIngredient", b =>
                {
                    b.HasOne("ModelsDB.Dish", "Dish")
                        .WithMany("DishIngredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ModelsDB.Ingredient", "Ingredient")
                        .WithMany("DishIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.IngredientNutrient", b =>
                {
                    b.HasOne("ModelsDB.Ingredient", "Ingredient")
                        .WithMany("Nutrients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.Nutrient", "Nutrient")
                        .WithMany("Ingredients")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MealTimeToXYAxis", b =>
                {
                    b.HasOne("ModelsDB.Diet", "Diet")
                        .WithMany("MealTimesToXYAxis")
                        .HasForeignKey("DietId");

                    b.HasOne("ModelsDB.Dish", "Dish")
                        .WithMany("MealTimes")
                        .HasForeignKey("DishId");

                    b.HasOne("ModelsDB.Functionality.Meal", "Meal")
                        .WithMany("MealTimeToXYAxes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("ModelsDB.Functionality.MessageTo", b =>
                {
                    b.HasOne("ModelsDB.Admin", "Admin")
                        .WithMany("MessageTo")
                        .HasForeignKey("AdminId");

                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("MessageTo")
                        .HasForeignKey("DieticianId");

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("MessageTo")
                        .HasForeignKey("PatientId");

                    b.Navigation("Admin");

                    b.Navigation("Dietician");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.NotePatient", b =>
                {
                    b.HasOne("ModelsDB.Note", "Note")
                        .WithMany("NotePatients")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("NotePatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Nutrient", b =>
                {
                    b.HasOne("ModelsDB.Functionality.Unit", "Unit")
                        .WithMany("Nutrients")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ModelsDB.Functionality.PatientCardSurvey", b =>
                {
                    b.HasOne("ModelsDB.PatientCard", "PatientCard")
                        .WithMany("PatientCardSurveys")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Survey", "Survey")
                        .WithMany("PatientCardSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientCard");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("ModelsDB.Functionality.RecipeStep", b =>
                {
                    b.HasOne("ModelsDB.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Visit", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("Visits")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.Status", "Status")
                        .WithMany("Visits")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.Term", "Term")
                        .WithMany("Visits")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("ModelsDB.Ingredient", b =>
                {
                    b.HasOne("ModelsDB.Dietician", "Dietician")
                        .WithMany("Ingredients")
                        .HasForeignKey("DieticianId");

                    b.HasOne("ModelsDB.Measure", "Measure")
                        .WithMany("Ingredients")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.Unit", "Unit")
                        .WithMany("Ingredients")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Measure");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ModelsDB.Layout.Article", b =>
                {
                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithMany()
                        .HasForeignKey("LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.Carousel", b =>
                {
                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithMany()
                        .HasForeignKey("LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.Link", b =>
                {
                    b.HasOne("ModelsDB.Layout.Footer", "Footer")
                        .WithMany("Links")
                        .HasForeignKey("FooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithMany("Links")
                        .HasForeignKey("LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footer");

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.MainNavbar", b =>
                {
                    b.HasOne("ModelsDB.Layout.LayoutCategory", "LayoutCategory")
                        .WithOne("MainNavbar")
                        .HasForeignKey("ModelsDB.Layout.MainNavbar", "LayoutCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutCategory");
                });

            modelBuilder.Entity("ModelsDB.Layout.SocialMedia", b =>
                {
                    b.HasOne("ModelsDB.Layout.Footer", "Footer")
                        .WithMany("SocialMedia")
                        .HasForeignKey("FooterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Link", "Link")
                        .WithOne("SocialMedia")
                        .HasForeignKey("ModelsDB.Layout.SocialMedia", "LinkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Footer");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("ModelsDB.Layout.SubTab", b =>
                {
                    b.HasOne("ModelsDB.Layout.Link", "Link")
                        .WithOne("SubTab")
                        .HasForeignKey("ModelsDB.Layout.SubTab", "LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Layout.Tab", "Tab")
                        .WithMany("SubTabs")
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Tab");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Document", b =>
                {
                    b.HasOne("ModelsDB.ManualPanel.Content", "Content")
                        .WithMany("Documents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.ManualPanel.FileCategory", "FileCategory")
                        .WithMany()
                        .HasForeignKey("FileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("FileCategory");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.FileCategory", b =>
                {
                    b.HasOne("ModelsDB.ManualPanel.CategoryType", "CategoryType")
                        .WithMany("FileCategories")
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryType");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Manual", b =>
                {
                    b.HasOne("ModelsDB.ManualPanel.Content", "Content")
                        .WithMany("Manuals")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.ManualPanel.FileCategory", "FileCategory")
                        .WithMany("Manuals")
                        .HasForeignKey("FileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("FileCategory");
                });

            modelBuilder.Entity("ModelsDB.Note", b =>
                {
                    b.HasOne("ModelsDB.Admin", null)
                        .WithMany("Notes")
                        .HasForeignKey("AdminId");

                    b.HasOne("ModelsDB.Dietician", null)
                        .WithMany("Notes")
                        .HasForeignKey("DieticianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", null)
                        .WithMany("Notes")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ModelsDB.Office", b =>
                {
                    b.HasOne("ModelsDB.Address", "Address")
                        .WithMany("Offices")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ModelsDB.Patient", b =>
                {
                    b.HasOne("ModelsDB.Address", "Address")
                        .WithMany("Patients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.PatientCard", "PatientCard")
                        .WithMany("Patients")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Functionality.Sex", null)
                        .WithMany("Patients")
                        .HasForeignKey("SexId");

                    b.Navigation("Address");

                    b.Navigation("PatientCard");
                });

            modelBuilder.Entity("ModelsDB.PatientCard", b =>
                {
                    b.HasOne("ModelsDB.Functionality.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("ModelsDB.Rating", b =>
                {
                    b.HasOne("ModelsDB.Patient", null)
                        .WithMany("Ratings")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ModelsDB.SingleTestEqual", b =>
                {
                    b.HasOne("ModelsDB.TestEqual", "TestEqual")
                        .WithMany("SingleTestEqual")
                        .HasForeignKey("TestEqualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestEqual");
                });

            modelBuilder.Entity("ModelsDB.TestEqual", b =>
                {
                    b.HasOne("ModelsDB.PatientCard", "PatientCard")
                        .WithMany("TestEquals")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsDB.Patient", "Patient")
                        .WithMany("TestEquals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PatientCard");
                });

            modelBuilder.Entity("ModelsDB.Address", b =>
                {
                    b.Navigation("Dieticians");

                    b.Navigation("Offices");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ModelsDB.Admin", b =>
                {
                    b.Navigation("MessageTo");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("ModelsDB.Diet", b =>
                {
                    b.Navigation("MealTimesToXYAxis");
                });

            modelBuilder.Entity("ModelsDB.Dietician", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DieticianNotes");

                    b.Navigation("DieticianOffices");

                    b.Navigation("DieticianPatients");

                    b.Navigation("DieticianSpecializations");

                    b.Navigation("Diets");

                    b.Navigation("Diplomas");

                    b.Navigation("FoodCatalogs");

                    b.Navigation("Ingredients");

                    b.Navigation("MessageTo");

                    b.Navigation("Notes");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ModelsDB.Dish", b =>
                {
                    b.Navigation("DishFoodCatalogs");

                    b.Navigation("DishIngredients");

                    b.Navigation("MealTimes");
                });

            modelBuilder.Entity("ModelsDB.FoodCatalog", b =>
                {
                    b.Navigation("DishFoodCatalogs");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Meal", b =>
                {
                    b.Navigation("MealTimeToXYAxes");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Nutrient", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Sex", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Specialization", b =>
                {
                    b.Navigation("DieticianSpecializations");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Status", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Term", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ModelsDB.Functionality.Unit", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Nutrients");
                });

            modelBuilder.Entity("ModelsDB.Ingredient", b =>
                {
                    b.Navigation("DishIngredients");

                    b.Navigation("Nutrients");
                });

            modelBuilder.Entity("ModelsDB.Layout.Footer", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("ModelsDB.Layout.LayoutCategory", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("MainNavbar");
                });

            modelBuilder.Entity("ModelsDB.Layout.Link", b =>
                {
                    b.Navigation("SocialMedia");

                    b.Navigation("SubTab");
                });

            modelBuilder.Entity("ModelsDB.Layout.Tab", b =>
                {
                    b.Navigation("SubTabs");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.CategoryType", b =>
                {
                    b.Navigation("FileCategories");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.Content", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Manuals");
                });

            modelBuilder.Entity("ModelsDB.ManualPanel.FileCategory", b =>
                {
                    b.Navigation("Manuals");
                });

            modelBuilder.Entity("ModelsDB.Measure", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("ModelsDB.Note", b =>
                {
                    b.Navigation("DieticianNotes");

                    b.Navigation("NotePatients");
                });

            modelBuilder.Entity("ModelsDB.Office", b =>
                {
                    b.Navigation("DieticianOffices");
                });

            modelBuilder.Entity("ModelsDB.Patient", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DieticianPatients");

                    b.Navigation("Dieticians");

                    b.Navigation("Diets");

                    b.Navigation("MessageTo");

                    b.Navigation("NotePatients");

                    b.Navigation("Notes");

                    b.Navigation("Ratings");

                    b.Navigation("TestEquals");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ModelsDB.PatientCard", b =>
                {
                    b.Navigation("PatientCardSurveys");

                    b.Navigation("Patients");

                    b.Navigation("TestEquals");
                });

            modelBuilder.Entity("ModelsDB.Rating", b =>
                {
                    b.Navigation("Dieticians");
                });

            modelBuilder.Entity("ModelsDB.Recipe", b =>
                {
                    b.Navigation("Dish");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("ModelsDB.Survey", b =>
                {
                    b.Navigation("PatientCardSurveys");
                });

            modelBuilder.Entity("ModelsDB.TestEqual", b =>
                {
                    b.Navigation("SingleTestEqual");
                });
#pragma warning restore 612, 618
        }
    }
}
